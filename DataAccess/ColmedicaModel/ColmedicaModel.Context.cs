//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.ColmedicaModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ColmedicaContext : DbContext
    {
        public ColmedicaContext()
            : base("name=ColmedicaContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<logErrorPeticion> logErrorPeticion { get; set; }
        public virtual DbSet<LogResultadosColmedica> LogResultadosColmedica { get; set; }
        public virtual DbSet<tempAuth> tempAuth { get; set; }
        public virtual DbSet<tempCita> tempCita { get; set; }
        public virtual DbSet<tempCitasBeneficiario> tempCitasBeneficiario { get; set; }
        public virtual DbSet<tempContratos> tempContratos { get; set; }
        public virtual DbSet<tempEspecialidades> tempEspecialidades { get; set; }
        public virtual DbSet<tempInfoAgendamiento> tempInfoAgendamiento { get; set; }
        public virtual DbSet<tempBeneficiarios> tempBeneficiarios { get; set; }
        public virtual DbSet<tempCiudades> tempCiudades { get; set; }
        public virtual DbSet<tempContratosFactura> tempContratosFactura { get; set; }
        public virtual DbSet<LogsFacturas> LogsFacturas { get; set; }
        public virtual DbSet<LogsEmailRetefuente> LogsEmailRetefuente { get; set; }
        public virtual DbSet<tempTitular> tempTitular { get; set; }
    
        public virtual int updateCita(string idConversacion, string campo, string valor)
        {
            var idConversacionParameter = idConversacion != null ?
                new ObjectParameter("idConversacion", idConversacion) :
                new ObjectParameter("idConversacion", typeof(string));
    
            var campoParameter = campo != null ?
                new ObjectParameter("campo", campo) :
                new ObjectParameter("campo", typeof(string));
    
            var valorParameter = valor != null ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCita", idConversacionParameter, campoParameter, valorParameter);
        }
    
        public virtual int cleanTablesConversation(string idConversacion)
        {
            var idConversacionParameter = idConversacion != null ?
                new ObjectParameter("idConversacion", idConversacion) :
                new ObjectParameter("idConversacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cleanTablesConversation", idConversacionParameter);
        }
    
        public virtual int cleanTablesFlujo(Nullable<int> proceso, string idConversacion, string tabla)
        {
            var procesoParameter = proceso.HasValue ?
                new ObjectParameter("proceso", proceso) :
                new ObjectParameter("proceso", typeof(int));
    
            var idConversacionParameter = idConversacion != null ?
                new ObjectParameter("idConversacion", idConversacion) :
                new ObjectParameter("idConversacion", typeof(string));
    
            var tablaParameter = tabla != null ?
                new ObjectParameter("tabla", tabla) :
                new ObjectParameter("tabla", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cleanTablesFlujo", procesoParameter, idConversacionParameter, tablaParameter);
        }
    
        public virtual int saveLinkCitaNoTemp(string idConversacion, Nullable<int> idCitaParam, string flag)
        {
            var idConversacionParameter = idConversacion != null ?
                new ObjectParameter("idConversacion", idConversacion) :
                new ObjectParameter("idConversacion", typeof(string));
    
            var idCitaParamParameter = idCitaParam.HasValue ?
                new ObjectParameter("idCitaParam", idCitaParam) :
                new ObjectParameter("idCitaParam", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("saveLinkCitaNoTemp", idConversacionParameter, idCitaParamParameter, flagParameter);
        }
    
        public virtual int insertCitas(string jsonCitas, string idConv)
        {
            var jsonCitasParameter = jsonCitas != null ?
                new ObjectParameter("jsonCitas", jsonCitas) :
                new ObjectParameter("jsonCitas", typeof(string));
    
            var idConvParameter = idConv != null ?
                new ObjectParameter("idConv", idConv) :
                new ObjectParameter("idConv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertCitas", jsonCitasParameter, idConvParameter);
        }
    
        public virtual int insertLogCita(string idConversacion, Nullable<int> idCitaParam, string flag, string estadoCita)
        {
            var idConversacionParameter = idConversacion != null ?
                new ObjectParameter("idConversacion", idConversacion) :
                new ObjectParameter("idConversacion", typeof(string));
    
            var idCitaParamParameter = idCitaParam.HasValue ?
                new ObjectParameter("idCitaParam", idCitaParam) :
                new ObjectParameter("idCitaParam", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var estadoCitaParameter = estadoCita != null ?
                new ObjectParameter("estadoCita", estadoCita) :
                new ObjectParameter("estadoCita", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertLogCita", idConversacionParameter, idCitaParamParameter, flagParameter, estadoCitaParameter);
        }
    
        public virtual int InsertLogFactura(string idConv, string estado, string numDoc, string tipoDoc, string flag, string numeroContrato, string saldo, string link)
        {
            var idConvParameter = idConv != null ?
                new ObjectParameter("idConv", idConv) :
                new ObjectParameter("idConv", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var numDocParameter = numDoc != null ?
                new ObjectParameter("numDoc", numDoc) :
                new ObjectParameter("numDoc", typeof(string));
    
            var tipoDocParameter = tipoDoc != null ?
                new ObjectParameter("tipoDoc", tipoDoc) :
                new ObjectParameter("tipoDoc", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var numeroContratoParameter = numeroContrato != null ?
                new ObjectParameter("numeroContrato", numeroContrato) :
                new ObjectParameter("numeroContrato", typeof(string));
    
            var saldoParameter = saldo != null ?
                new ObjectParameter("saldo", saldo) :
                new ObjectParameter("saldo", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("link", link) :
                new ObjectParameter("link", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLogFactura", idConvParameter, estadoParameter, numDocParameter, tipoDocParameter, flagParameter, numeroContratoParameter, saldoParameter, linkParameter);
        }
    }
}
